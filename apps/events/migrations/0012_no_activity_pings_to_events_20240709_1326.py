# Generated by Django 4.2.11 on 2024-07-09 13:26

from django.db import migrations

from apps.events.models import EventActionType, EventLogStatusChoices
from apps.chat.models import ChatMessageType

def convert_no_activity_pings_to_event(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    NoActivityMessageConfig = apps.get_model("experiments", "NoActivityMessageConfig")
    TimeoutTrigger = apps.get_model("events", "TimeoutTrigger")
    EventAction = apps.get_model("events", "EventAction")
    EventLog = apps.get_model("events", "EventLog")
    ChatMessage = apps.get_model("chat", "ChatMessage")

    timeout_trigger_content_type = ContentType.objects.get_for_model(TimeoutTrigger)

    for no_activity_ping in NoActivityMessageConfig.objects.all():
        for experiment in no_activity_ping.experiment_set.all():
            action = EventAction.objects.create(
                action_type=EventActionType.SEND_MESSAGE_TO_BOT,
                params={"message_to_bot": no_activity_ping.message_for_bot}
            )
            trigger = TimeoutTrigger.objects.create(
                action=action,
                experiment=experiment,
                delay=no_activity_ping.ping_after * 60,
                total_num_triggers=no_activity_ping.max_pings,
            )
            for session in experiment.sessions.filter(no_activity_ping_count__gte=1):
                last_human_message_id = (
                    ChatMessage.objects.filter(
                        chat__experiment_session=session,
                        message_type=ChatMessageType.HUMAN,
                    )
                    .order_by("-created_at")
                    .values("id")[:1]
                )
                for _ in range(session.no_activity_ping_count):
                    EventLog.objects.create(
                        object_id=trigger.id,
                        content_type=timeout_trigger_content_type,
                        chat_message_id=last_human_message_id,
                        session=session,
                        status=EventLogStatusChoices.SUCCESS,
                        log="Automatically generated from no activity ping migration"

                    )
            experiment.save()


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0011_update_timed_out_events_trigger_schedule'),
    ]

    run_before = [
        ("experiments", "0083_remove_experiment_no_activity_config_and_more"),
    ]

    operations = [
        migrations.RunPython(convert_no_activity_pings_to_event, migrations.RunPython.noop)
    ]
