# Generated by Django 5.1 on 2024-10-24 09:03

from collections import namedtuple
from django.db import migrations

def _create_llm_provider_models(apps, schema_editor):
    _create_default_llm_provider_models(apps, schema_editor)
    _create_custom_llm_provider_models(apps, schema_editor)

DefaultLlmProviderModel = namedtuple('DefaultLlmProviderModel', ["type", "name", "max_token_limit"])

DEFAULT_LLM_PROVIDER_MODELS = {
    DefaultLlmProviderModel("openai", "gpt-4o-mini", 8192),
    DefaultLlmProviderModel("anthropic", "claude", 8192),
}

def _create_default_llm_provider_models(apps, schema_editor):
    LlmProviderModel = apps.get_model("service_providers", "LlmProviderModel")
    for default_provider_model in DEFAULT_LLM_PROVIDER_MODELS:
        LlmProviderModel.objects.create(
            team=None,
            type=default_provider_model.type,
            name=default_provider_model.name,
            max_token_limit=default_provider_model.max_token_limit,
            supports_tool_calling=True,
        )
    # TODO: Get list of current global models

def _create_custom_llm_provider_models(apps, schema_editor):
    LlmProviderModel = apps.get_model("service_providers", "LlmProviderModel")
    Experiment = apps.get_model("experiments", "Experiment")

    for experiment in Experiment.objects.select_related("llm_provider").all():

        if experiment.llm_provider is None and experiment.pipeline:
            # TODO: Add new llm_provider_model to pipelines
            continue

        try:
            global_provider_model = LlmProviderModel.objects.get(
                team__isnull=True,
                type=experiment.llm_provider.type,
                name=experiment.llm,
                max_token_limit=experiment.max_token_limit
            )
            experiment.llm_provider_model = global_provider_model
            experiment.save()
            continue
        except LlmProviderModel.DoesNotExist:
            pass

        try:
            custom_provider_model = LlmProviderModel.objects.get(team=experiment.team, type=experiment.llm_provider.type, name=experiment.llm, max_token_limit=experiment.max_token_limit)
            experiment.llm_provider_model = custom_provider_model
            experiment.save()
            continue
        except LlmProviderModel.DoesNotExist:
            pass

        new_custom_provider_model = LlmProviderModel.objects.create(
            team=experiment.team,
            type=experiment.llm_provider.type,
            name=experiment.llm,
            max_token_limit=experiment.max_token_limit,
        )
        experiment.llm_provider_model = new_custom_provider_model
        experiment.save()


def _delete_all_llm_provider_models(apps, schema_editor):
    LlmProviderModel = apps.get_model("service_providers", "LlmProviderModel")
    LlmProviderModel.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('service_providers', '0018_llmprovidermodel'),
    ]

    operations = [migrations.RunPython(_create_llm_provider_models, reverse_code=_delete_all_llm_provider_models)
    ]
